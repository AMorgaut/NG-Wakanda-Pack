var sockets = [];self.onconnect = function (event) {    var port = event.ports[0];        // manage sockets vs server-threads    if (port.hasOwnProperty('binaryType')) {        sockets.push(port);    }    // manage messages    port.onmessage = function (event) {        var vendor;        var data = event.data;        if (typeof data === string) {            data = JSON.parse(data);        }		        switch (data.action) {        case 'connect':            port.userID = data.user;            vendor = ds.Employee(data.user).vendor;            sockets.forEach(function broadcast(socket) {                if (socket.userID === vendor.ID) {                    socket.postMessage({type:"connect", user:port.userID});                }            });            break;        case 'broadcast':        var message = JSON.stringify(data.message);            sockets.forEach(function broadcast(socket) {            // broadcast to targets only            //if (!data.targets || data.targets.indexOf(socket.userID) > -1) {	                    socket.postMessage(message);			            //}        });        break;        }    };};